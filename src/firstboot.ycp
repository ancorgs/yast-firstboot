/* ------------------------------------------------------------------------------
 * Copyright (c) 2012 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * Maintainer:             Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 */
{
    textdomain "firstboot";

    import "Directory";
    import "Mode";
    import "Stage";
    import "ProductControl";
    import "Wizard";
    import "Report";
    import "Firstboot";
    import "Misc";
    import "PackageCallbacksInit";


    Wizard::OpenNextBackStepsDialog();

    string wizard_mode = Mode::test () ? "installation" : Mode::mode ();

    list<map> stage_mode = [$["stage": "firstboot",  "mode": wizard_mode ]];
    ProductControl::AddWizardSteps(stage_mode);

    // Do log Report messages by default (#180862)
    Report::LogMessages(true);
    Report::LogErrors(true);
    Report::LogWarnings(true);

    // initialize package callbacks, since some of the modules run in the
    // firstboot workflow expect them to be initialized (bug #335979)
    PackageCallbacksInit::InitPackageCallbacks ();

    symbol ret = ProductControl::Run();
    y2milestone("ProductControl::Run() returned: %1", ret);

    Pkg::SourceFinishAll();
    Pkg::TargetFinish();

    if (ret == `next || ret == `finish)
    {
	string action	= Misc::SysconfigRead(.sysconfig.firstboot.FIRSTBOOT_FINISH_ACTION, "");
	if (action == "reboot")
	{
	    SCR::Execute (.target.bash, sformat ("touch %1/firstboot_reboot_after_finish", Directory::vardir));
	}
    }

    UI::CloseDialog();

    // handle abort
    if (ret == `abort)
    {
	// do the same action as if the license has not been accepted
	string action = Misc::SysconfigRead(.sysconfig.firstboot.LICENSE_REFUSAL_ACTION, "halt");
	y2milestone("Firstboot aborted, LICENSE_REFUSAL_ACTION: %1", action);

	if (action == "halt")
	{
	    y2milestone("Halting the system...");
	    SCR::Execute(.target.bash, "/sbin/halt");
	}
	else if (action == "reboot")
	{
	    y2milestone("Rebooting the system...");
	    SCR::Execute(.target.bash, "/sbin/reboot");
	}
	else if (action == "continue")
	{
	    y2milestone("Finishing Yast...");
	}
	else
	{
	    y2error("Unknown action: %1", action);
	}
    }

    return ret;
}
