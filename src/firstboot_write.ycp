/**
 * File:	firstboot/src/firstboot_write.ycp
 * Module:	Installation
 * Summary:	Finish Firstboot
 * Authors:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */
{
    textdomain "firstboot";
    import "Directory";
    import "FileUtils";
    import "Firstboot";
    import "Keyboard";
    import "Popup";
    import "Progress";
    import "ProductFeatures";
    import "Wizard";


    list<string> progress_stages =
	[
	 // progress stages
	 _("Update configuration"),
	 // progress stages
	 _("Prepare system for first login")
	 ];

    list progress_descriptions =
	[
	 // progress stages
	 _("Updating configuration..."),
	 // progress stages
	 _("Preparing system for first login...")
             ];


    // Help text for last dialog of base installation
    string help_text = _("<p>
Please wait while the system is being configured.
</p>");


    Progress::on();

    Progress::New(
		  // Headline for last dialog of first boot workflow
		  _("Completing the System Configuration"),
		  "",	// Initial progress bar label - not empty (reserve space!)
		  2,	// progress bar length
		  progress_stages,
		  progress_descriptions,
		  help_text );


    Wizard::EnableNextButton();
    Wizard::EnableBackButton();
    Progress::NextStage ();


    // Desktop settings
    string default_dm = "kdm";
    if ( Firstboot::default_wm == "gnome" )
    {
        default_dm = "gdm";
    }
    SCR::Write(
            .sysconfig.displaymanager.DISPLAYMANAGER, default_dm
            );
    SCR::Write(
            .sysconfig.windowmanager.DEFAULT_WM, Firstboot::default_wm
            );


    // Dont run firstboot next time
    SCR::Execute (.target.remove, Firstboot::reconfig_file);

    // save product features if they do not exist
    if (!FileUtils::Exists ("/etc/YaST2/ProductFeatures"))
    {
        y2milestone ("Saving ProductFeatures...");
        SCR::Execute (.target.bash, "/bin/mkdir -p '/etc/YaST2'");
        SCR::Execute (.target.bash, "touch '/etc/YaST2/ProductFeatures'");
        ProductFeatures::Save();
    }

    sleep(100);
    Progress::NextStage ();

    // call the X11 config before executing the scripts... (bnc#497819,c23)
    string file = sformat ("%1/firstboot_x11_save", Directory::vardir);
    if (FileUtils::Exists (file))
    {
	// current X11 keyboard layout needs to be saved
	Keyboard::xf86_update ();
	SCR::Execute (.target.remove, file);
    }

    Firstboot::ExecuteScripts();
    sleep(100);
    Progress::Finish ();

    return `next;

//EOF
}
